/**
 * Created by luojianzong on 16/5/23.
 */
import request from "reqwest";
import {Promise} from "es6-promise";
import {api} from "../config/FrameworkConfig";

var defaults = {};
var apiBaseUrlDefault = api.msApiRoot;

var extend = function (obj) {
    let args = Array.prototype.slice.call(arguments, 1);
    args.forEach(function(src) {
        Object.keys(src).forEach(function(key) {
            obj[key] = src[key];
        });
    });
    return obj;
};

const httpRespDataConverter = function (data, status, headers, config) {
    var _newResult = {},
        resp = {};

    if (status == 200) {

        _newResult = angular.copy(data);
        delete _newResult.resultCode; //"1000"表示业务逻辑成功！,"1022"-业务走不下去的错误, "2022"-表示系统未知错误
        delete _newResult.resultMsg;

        resp = {
            code: data.resultCode || "", // code =="" 链接超时必须跳转到APP 超时页面。ewap://1qianbao/merchant/action_finish
            message: data.resultMsg || "",
            data: _newResult
        };
    } else {
        var _code = data && data.resultCode || status;
        resp = {
            code: _code,
            message: data && data.resultMsg || "[" + _code + ": 服务器未知错误]",
            data: _newResult
        };
    }
    return resp;
};


const getRequestUrl = function (url, apiBaseUrl) {
    apiBaseUrl = apiBaseUrl || apiBaseUrlDefault;
    if (!/^(ftp:\/\/|http:\/\/|https:\/\/|\/\/)[^ "]+$/.test(url)) {
        url = apiBaseUrl + url;
    }
    return url;
};

const ajax = function(config) {
    let promise = new Promise (function (resolve, reject) {
        if (typeof config === 'string') {
            config = {url: config};
        }
        config.success = function() {
            resolve(arguments);
        };
        config.error = function() {
            reject(arguments);
        };
        request(extend({}, defaults, config));
    });
    return promise;
};

var _ajax = function (method) {
    return function(config) {
        if (typeof config === 'string') {
            config = {url: config};
        }
        config.method = method;
        return ajax(config);
    };
};

const promiseAll = function (array) {
    return Promise.all(array);
}

const get = _ajax('get');

const post = _ajax("post");


/*
config options:

url: a fully qualified uri

method: http method (default: GET)

headers: http headers (default: {})

data: entity body for PATCH, POST and PUT requests. Must be a query String or JSON object

type: a string enum. html, xml, json, or jsonp. Default is inferred by resource extension. Eg: .json will set type to json. .xml to xml etc.
    contentType sets the Content-Type of the request. Eg: application/json

crossOrigin: for cross-origin requests for browsers that support this feature.
    success A function called when the request successfully completes

error: A function called when the request fails.

complete: A function called whether the request is a success or failure. Always called when complete.

jsonpCallback: Specify the callback function name for a JSONP request. This value will be used instead of the random (but recommended) name automatically generated by reqwest.

*/

export {
    ajax,
    get,
    post,
    promiseAll
}
